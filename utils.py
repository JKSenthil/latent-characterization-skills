import torch
import pickle
import numpy as np
import matplotlib.pyplot as plt

from config import DATA_PATH, PLOTS_DIR

def load_trajectory(path=DATA_PATH):
    big_traj_dict, _ = pickle.load(open(path, "rb"))
    return big_traj_dict

def train_val_split(data, val_split):
    n = len(data)
    train_split = 1 - val_split
    return data[:int(train_split * n)], data[int(train_split * n):]

def plot_trajectory_histogram(traj_dict, point=None, thres=1000):
    histogram = {}
    if point == None: # plot traj for all plots
        points = traj_dict.keys()
    else:
        points = [point]
    
    for point in points:
        data = traj_dict[point]
        for traj in data:
            if len(traj) < thres:
                if len(traj) not in histogram:
                    histogram[len(traj)] = 0
                histogram[len(traj)] += 1
    
    plt.figure()
    plt.xlabel("Trajectory length")
    plt.ylabel("Frequency")
    plt.bar(histogram.keys(), histogram.values(), 1.0, color='g')
    plt.savefig('histogram.png')

def plot(name, trajectory):
    """
    Used for plotting trajectories generated by VRNN
    """
    x = trajectory[:, 0]
    y = trajectory[:, 1]

    plt.figure()
    plt.xlim(5, 11)
    plt.ylim(5, 11)
    ax = plt.axes()
    ax.plot(x, y)

    plt.savefig(PLOTS_DIR + "/{}".format(name))

def plot_point_trajectories(padded_trajectories, num_to_plot):
    """
    Used for plotting actual trajectories
    """
    for i in range(num_to_plot):
        traj = padded_trajectories[i] # shape thres, 6
        x = traj[:, 0]
        y = traj[:, 1]
        
        plt.figure()

        plt.xlim(5, 11)
        plt.ylim(5, 11)
        ax = plt.axes()
        ax.plot(x, y)

        plt.savefig(PLOTS_DIR + "/{}".format(str(i)))